#include<bits/stdc++.h>
using namespace std;


int opt(int arr[], int n){
    if(n==0){
        return 0;
    }


    vector<int> ans;
    ans.push_back(arr[0]);


    for(int i=1; i<n; i++){
        if(arr[i]> ans.back()){
            ans.push_back(arr[i]);
        }
        else{
            //finding index of element of just bada 
            int index = lower_bound(ans.begin(), ans.end(), arr[i]) - ans.begin();
            ans[index] = arr[i];
        }
    }
    return ans.size();


}


int spaceOpt(int arr[], int n){
    vector<int> next(n+1, 0);
    vector<int> curr(n+1, 0);


    


    for(int index = n-1; index>=0; index--){
        for(int prev = index -1; prev>=-1; prev--){
            int ans1 = 0;   
    if(prev == -1 || arr[index] > arr[prev]){
    ans1 = curr[index+1]  + 1;
    }


    //exclude
    int ans2 = curr[prev+1];
    next[prev+1] = max(ans1, ans2);
        }
        curr = next;
    }
    return curr[0];
}


int solveTab(int arr[], int n){
    vector<vector<int>> dp(n+1, vector<int> (n+1, 0));


  


    for(int index = n-1; index>=0; index--){
        for(int prev = index -1; prev>=-1; prev--){
            int ans1 = 0;   
    if(prev == -1 || arr[index] > arr[prev]){
    ans1 = dp[index+1][index+1]  + 1;
    }


    //exclude
    int ans2 = dp[index+1][prev+1];
    dp[index][prev+1] = max(ans1, ans2);
        }
    }
    return dp[0][0];
}


int solveMem(int arr[], int n, int index, int prev, vector<vector<int>> &dp){
    //base case
    if(index>=n){
        return 0;
    }


    if(dp[index][prev+1] != -1){
        return dp[index][prev+1];
    }
    //include
    int ans1 = INT_MIN;
    
    if(prev == -1 || arr[index] > arr[prev]){
    ans1 = solveMem(arr, n, index+1, index, dp) + 1;
    }


    //exclude
    int ans2 = solveMem(arr, n, index+1, prev, dp);
    dp[index][prev+1] = max(ans1, ans2);


    return dp[index][prev+1];
}


int longestIncreasingSubsequence(int arr[], int n)
{
    // vector<vector<int>> dp(n+1,vector<int>(n+1, -1));
    // return solveMem(arr, n, 0, -1, dp);
    // return solveTab(arr, n);
    // return spaceOpt(arr, n);
    return opt(arr, n);
}

